/* frontend/css/style.css */

/* ... (other styles remain the same) ... */


/* --- CSS Poker Card Style (ADJUSTED FOR ROOM CONTEXT) --- */
.card-css {
    /* Original from previous: clamp(54px, 6.96vw, 78px); */
    /* Let's try reducing the vw influence and max size.
       If game-container is max 900px, 6.96vw of 1920px viewport is ~133px (too big)
       If game-container is max 900px, we want cards to be a fraction of that.
       Say we want ~10-12 cards to fit across roughly. 900px / 12 = 75px.
       This also depends on how many cards are expected in a row (13 in hand, 5 in bottom).
    */
    /* Let's try a different approach for vw or use em/rem if parent font size is consistent */

    /* Option A: Significantly reduce vw and max pixel value */
    width: clamp(45px, 4.5vw, 65px); /* Reduced from 54px, 6.96vw, 78px */
    /* Height should maintain aspect ratio or be set accordingly */
    /* Aspect ratio was ~1.4 (e.g., 65px width -> 91px height) */
    height: clamp(63px, 6.3vw, 91px); /* Reduced from 76px, 9.74vw, 109px */

    /* Option B: Base it more on fixed values if vw is problematic in nested containers */
    /* width: clamp(50px, 12%, 70px); /* Using percentage of parent, if parent width is constrained */
    /* height: clamp(70px, 16%, 98px); */


    background-color: #ffffff;
    border: 1px solid #adb5bd;
    border-radius: clamp(3px, 0.5vw, 5px); /* Slightly smaller radius to match smaller cards */
    box-shadow: 1px 1px 3px rgba(0,0,0,0.1);
    overflow: hidden;
    padding: 0;
    box-sizing: border-box;
    transition: transform 0.15s ease-out, box-shadow 0.15s ease-out;
    user-select: none;
    cursor: grab;
    flex-shrink: 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

.card-css img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain; /* This is good, ensures image fits within the .card-css dimensions */
}


/* Also, let's check the .hand-row where cards are placed */
.hand-row, #player-hand.hand-row {
    display: flex;
    flex-wrap: wrap; /* This is important */
    justify-content: flex-start; /* Good for typical LTR card layout */
    align-items: center; /* Vertically align cards if they have different heights (shouldn't happen with uniform cards) */
    /* Original gap: clamp(5px, 1vw, 7px); */
    gap: clamp(4px, 0.8vw, 6px); /* Maybe slightly reduce gap if cards are smaller */
    
    /* Original min-height: clamp(85px, 11vw, 120px); */
    /* This min-height should be slightly larger than the card height */
    min-height: clamp(70px, 7vw, 100px); /* Adjusted based on new smaller card height */
    
    padding: clamp(6px, 1vw, 8px);
    border: 1px dashed #ced4da;
    border-radius: 5px;
    background-color: #e9ecef;
    margin-bottom: clamp(6px, 1vh, 8px);
    width: 100%; /* Takes full width of its parent (.player-area or .organized-rows) */
    box-sizing: border-box;
}

/* Ensure the game container itself isn't forcing an unexpected width context */
.room-container .game-container {
    width: 100%;
    max-width: 900px; /* This is key for constraining the game area */
    padding: 0; 
    background-color: #f0f3f7;
    display: flex; /* It's already a flex container */
    flex-direction: column;
    align-items: stretch; /* This is good */
    margin-left: auto; /* Center the game-container if the room-container is wider */
    margin-right: auto;
}

/* The player area within the game container */
.player-area {
    margin-bottom: clamp(10px, 2vh, 15px);
    padding: clamp(8px, 1.5vh, 10px);
    border: 1px solid #d1d9e6;
    border-radius: 6px;
    background-color: #f8f9fa;
    width: 100%; /* Takes full width of .game-container */
    box-sizing: border-box;
}


/* ... (rest of the CSS, especially SortableJS styles, controls, message area, etc., should be fine) ... */
